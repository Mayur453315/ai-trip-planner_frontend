{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"../user-navbar/user-navbar.component\";\nfunction GenerateItineraryComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"h4\");\n    i0.ɵɵtext(2, \"Your AI Trip Plan:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"div\", 12);\n    i0.ɵɵelementStart(4, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function GenerateItineraryComponent_div_19_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.saveTrip());\n    });\n    i0.ɵɵtext(5, \"Save AI Trip Plan\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.convertedItineraryHtml, i0.ɵɵsanitizeHtml);\n  }\n}\nexport class GenerateItineraryComponent {\n  constructor(http, sanitizer, router) {\n    this.http = http;\n    this.sanitizer = sanitizer;\n    this.router = router;\n    this.destination = '';\n    this.startDate = '';\n    this.endDate = '';\n    this.rawResult = '';\n    this.translatedResult = '';\n    this.safeHtmlResult = '';\n    this.isLoading = false;\n    this.selectedLanguage = 'en';\n    this.weatherData = null;\n  }\n  generateItinerary() {\n    this.rawResult = '';\n    this.safeHtmlResult = '';\n    this.isLoading = true;\n    const body = {\n      destination: this.destination,\n      startDate: this.startDate,\n      endDate: this.endDate\n    };\n    this.http.post('http://localhost:8084/api/gemini/generate-itinerary', body).subscribe({\n      next: res => {\n        this.rawResult = res.itinerary;\n        this.translateItinerary(this.rawResult, this.selectedLanguage);\n      },\n      error: err => {\n        console.error('Itinerary Error:', err);\n        this.rawResult = 'An error occurred while generating the itinerary.';\n        this.safeHtmlResult = this.rawResult;\n        this.isLoading = false;\n      }\n    });\n  }\n  checkWeatherAndPacking() {\n    this.rawResult = '';\n    this.safeHtmlResult = '';\n    this.weatherData = null;\n    this.isLoading = true;\n    const apiKey = 'cf4280e39d29669fba3fcbd9bfc61b0c';\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.destination}&appid=${apiKey}&units=metric`;\n    this.http.get(url).subscribe({\n      next: data => {\n        this.weatherData = data;\n        this.isLoading = false;\n      },\n      error: err => {\n        console.error('Weather Error:', err);\n        this.weatherData = null;\n        this.isLoading = false;\n      }\n    });\n  }\n  saveTrip() {\n    const finalText = this.translatedResult || this.rawResult;\n    const htmlFormatted = this.convertToHtml(finalText); // ✅ Convert to HTML\n    const tripData = {\n      destination: this.destination,\n      startDate: this.startDate,\n      endDate: this.endDate,\n      itinerary: htmlFormatted // ✅ Save formatted HTML\n    };\n\n    this.http.post('http://localhost:8084/api/ai-trips/save', tripData, {\n      responseType: 'text'\n    }).subscribe({\n      next: () => {\n        alert('Trip saved successfully!');\n        this.router.navigate(['/Ai-trip-list']);\n      },\n      error: err => {\n        console.error('Save Trip Error:', err);\n        alert('Failed to save trip.');\n      }\n    });\n  }\n  translateItinerary(text, targetLang) {\n    if (targetLang === 'en') {\n      this.translatedResult = text;\n      this.safeHtmlResult = this.sanitizer.bypassSecurityTrustHtml(this.convertToHtml(text));\n      this.isLoading = false;\n      return;\n    }\n    const url = `https://libretranslate.de/translate`;\n    const body = {\n      q: text,\n      source: 'en',\n      target: targetLang,\n      format: 'text'\n    };\n    this.http.post(url, body).subscribe({\n      next: res => {\n        const translatedText = res.translatedText;\n        this.translatedResult = translatedText;\n        this.safeHtmlResult = this.sanitizer.bypassSecurityTrustHtml(this.convertToHtml(translatedText));\n        this.isLoading = false;\n      },\n      error: err => {\n        console.error('Translation Error:', err);\n        this.translatedResult = text;\n        this.safeHtmlResult = this.convertToHtml(text);\n        this.isLoading = false;\n      }\n    });\n  }\n  convertToHtml(markdown) {\n    let html = markdown;\n    html = html.replace(/^## (.*$)/gim, '<h3>$1</h3>');\n    html = html.replace(/^# (.*$)/gim, '<h2>$1</h2>');\n    html = html.replace(/\\*\\*(.*?)\\*\\*/gim, '<strong>$1</strong>');\n    html = html.replace(/\\*(.*?)\\*/gim, '<em>$1</em>');\n    html = html.replace(/^\\* (.*$)/gim, '<li>$1</li>');\n    html = html.replace(/(<li>[\\s\\S]*?<\\/li>)/gim, '<ul>$1</ul>');\n    html = html.replace(/\\n/g, '<br>');\n    return html.trim();\n  }\n  static {\n    this.ɵfac = function GenerateItineraryComponent_Factory(t) {\n      return new (t || GenerateItineraryComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.DomSanitizer), i0.ɵɵdirectiveInject(i3.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GenerateItineraryComponent,\n      selectors: [[\"app-generate-itinerary\"]],\n      decls: 20,\n      vars: 4,\n      consts: [[1, \"container\", \"mt-4\", 2, \"max-width\", \"800px\"], [3, \"ngSubmit\"], [1, \"form-group\", \"mb-3\"], [\"for\", \"destination\"], [\"type\", \"text\", \"id\", \"destination\", \"name\", \"destination\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"startDate\"], [\"type\", \"date\", \"id\", \"startDate\", \"name\", \"startDate\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"endDate\"], [\"type\", \"date\", \"id\", \"endDate\", \"name\", \"endDate\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"class\", \"mt-4\", 4, \"ngIf\"], [1, \"mt-4\"], [1, \"border\", \"rounded\", \"p-3\", \"bg-light\", 3, \"innerHTML\"], [1, \"btn\", \"btn-success\", \"mt-3\", 3, \"click\"]],\n      template: function GenerateItineraryComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-user-navbar\");\n          i0.ɵɵelementStart(1, \"div\", 0)(2, \"h2\");\n          i0.ɵɵtext(3, \"AI Trip Itinerary Generator\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function GenerateItineraryComponent_Template_form_ngSubmit_4_listener() {\n            return ctx.generateItinerary();\n          });\n          i0.ɵɵelementStart(5, \"div\", 2)(6, \"label\", 3);\n          i0.ɵɵtext(7, \"Destination:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"input\", 4);\n          i0.ɵɵlistener(\"ngModelChange\", function GenerateItineraryComponent_Template_input_ngModelChange_8_listener($event) {\n            return ctx.destination = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\", 5);\n          i0.ɵɵtext(11, \"Start Date:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"input\", 6);\n          i0.ɵɵlistener(\"ngModelChange\", function GenerateItineraryComponent_Template_input_ngModelChange_12_listener($event) {\n            return ctx.startDate = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 2)(14, \"label\", 7);\n          i0.ɵɵtext(15, \"End Date:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"input\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function GenerateItineraryComponent_Template_input_ngModelChange_16_listener($event) {\n            return ctx.endDate = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"button\", 9);\n          i0.ɵɵtext(18, \"Generate Itinerary\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(19, GenerateItineraryComponent_div_19_Template, 6, 1, \"div\", 10);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngModel\", ctx.destination);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.startDate);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.endDate);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.showItinerary);\n        }\n      },\n      dependencies: [i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.RequiredValidator, i5.NgModel, i5.NgForm, i6.UserNavbarComponent],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","GenerateItineraryComponent_div_19_Template_button_click_4_listener","ɵɵrestoreView","_r2","ctx_r1","ɵɵnextContext","ɵɵresetView","saveTrip","ɵɵadvance","ɵɵproperty","ctx_r0","convertedItineraryHtml","ɵɵsanitizeHtml","GenerateItineraryComponent","constructor","http","sanitizer","router","destination","startDate","endDate","rawResult","translatedResult","safeHtmlResult","isLoading","selectedLanguage","weatherData","generateItinerary","body","post","subscribe","next","res","itinerary","translateItinerary","error","err","console","checkWeatherAndPacking","apiKey","url","get","data","finalText","htmlFormatted","convertToHtml","tripData","responseType","alert","navigate","text","targetLang","bypassSecurityTrustHtml","q","source","target","format","translatedText","markdown","html","replace","trim","ɵɵdirectiveInject","i1","HttpClient","i2","DomSanitizer","i3","Router","selectors","decls","vars","consts","template","GenerateItineraryComponent_Template","rf","ctx","GenerateItineraryComponent_Template_form_ngSubmit_4_listener","GenerateItineraryComponent_Template_input_ngModelChange_8_listener","$event","GenerateItineraryComponent_Template_input_ngModelChange_12_listener","GenerateItineraryComponent_Template_input_ngModelChange_16_listener","ɵɵtemplate","GenerateItineraryComponent_div_19_Template","showItinerary"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\pages\\generate-itinerary\\generate-itinerary.component.ts","E:\\tka\\travel-itinerary-frontend\\src\\app\\pages\\generate-itinerary\\generate-itinerary.component.html"],"sourcesContent":["\n\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-generate-itinerary',\n  templateUrl: './generate-itinerary.component.html',\n})\nexport class GenerateItineraryComponent {\n  destination = '';\n  startDate = '';\n  endDate = '';\n  rawResult: string = '';\n  translatedResult: string = '';\n  safeHtmlResult: SafeHtml = '';\n  isLoading: boolean = false;\n  selectedLanguage = 'en';\n  weatherData: any = null;\n\n  constructor(private http: HttpClient, private sanitizer: DomSanitizer, private router: Router) {}\n\n  generateItinerary() {\n    this.rawResult = '';\n    this.safeHtmlResult = '';\n    this.isLoading = true;\n\n    const body = {\n      destination: this.destination,\n      startDate: this.startDate,\n      endDate: this.endDate,\n    };\n\n    this.http.post<any>('http://localhost:8084/api/gemini/generate-itinerary', body).subscribe({\n      next: (res) => {\n        this.rawResult = res.itinerary;\n        this.translateItinerary(this.rawResult, this.selectedLanguage);\n      },\n      error: (err) => {\n        console.error('Itinerary Error:', err);\n        this.rawResult = 'An error occurred while generating the itinerary.';\n        this.safeHtmlResult = this.rawResult;\n        this.isLoading = false;\n      },\n    });\n  }\n\n  checkWeatherAndPacking() {\n    this.rawResult = '';\n    this.safeHtmlResult = '';\n    this.weatherData = null;\n    this.isLoading = true;\n\n    const apiKey = 'cf4280e39d29669fba3fcbd9bfc61b0c';\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.destination}&appid=${apiKey}&units=metric`;\n\n    this.http.get<any>(url).subscribe({\n      next: (data) => {\n        this.weatherData = data;\n        this.isLoading = false;\n      },\n      error: (err) => {\n        console.error('Weather Error:', err);\n        this.weatherData = null;\n        this.isLoading = false;\n      }\n    });\n  }\n\n\nsaveTrip() {\n  const finalText = this.translatedResult || this.rawResult;\n  const htmlFormatted = this.convertToHtml(finalText); // ✅ Convert to HTML\n\n  const tripData = {\n    destination: this.destination,\n    startDate: this.startDate,\n    endDate: this.endDate,\n    itinerary: htmlFormatted  // ✅ Save formatted HTML\n  };\n\n  this.http.post('http://localhost:8084/api/ai-trips/save', tripData, { responseType: 'text' }).subscribe({\n    next: () => {\n      alert('Trip saved successfully!');\n      this.router.navigate(['/Ai-trip-list']);\n    },\n    error: (err) => {\n      console.error('Save Trip Error:', err);\n      alert('Failed to save trip.');\n    }\n  });\n}\n\n\n\n\n  translateItinerary(text: string, targetLang: string) {\n    if (targetLang === 'en') {\n      this.translatedResult = text;\n      this.safeHtmlResult = this.sanitizer.bypassSecurityTrustHtml(this.convertToHtml(text));\n      this.isLoading = false;\n      return;\n    }\n\n    const url = `https://libretranslate.de/translate`;\n    const body = {\n      q: text,\n      source: 'en',\n      target: targetLang,\n      format: 'text'\n    };\n\n    this.http.post<any>(url, body).subscribe({\n      next: (res) => {\n        const translatedText = res.translatedText;\n        this.translatedResult = translatedText;\n        this.safeHtmlResult = this.sanitizer.bypassSecurityTrustHtml(this.convertToHtml(translatedText));\n        this.isLoading = false;\n      },\n      error: (err) => {\n        console.error('Translation Error:', err);\n        this.translatedResult = text;\n        this.safeHtmlResult = this.convertToHtml(text);\n        this.isLoading = false;\n      },\n    });\n  }\n\n  private convertToHtml(markdown: string): string {\n    let html = markdown;\n    html = html.replace(/^## (.*$)/gim, '<h3>$1</h3>');\n    html = html.replace(/^# (.*$)/gim, '<h2>$1</h2>');\n    html = html.replace(/\\*\\*(.*?)\\*\\*/gim, '<strong>$1</strong>');\n    html = html.replace(/\\*(.*?)\\*/gim, '<em>$1</em>');\n    html = html.replace(/^\\* (.*$)/gim, '<li>$1</li>');\n    html = html.replace(/(<li>[\\s\\S]*?<\\/li>)/gim, '<ul>$1</ul>');\n    html = html.replace(/\\n/g, '<br>');\n    return html.trim();\n  }\n}\n\n","<!-- src/app/pages/generate-itinerary/generate-itinerary.component.html -->\r\n<app-user-navbar></app-user-navbar>\r\n\r\n<div class=\"container mt-4\" style=\"max-width: 800px;\">\r\n  <h2>AI Trip Itinerary Generator</h2>\r\n\r\n  <form (ngSubmit)=\"generateItinerary()\">\r\n    <div class=\"form-group mb-3\">\r\n      <label for=\"destination\">Destination:</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"destination\" [(ngModel)]=\"destination\" name=\"destination\" required>\r\n    </div>\r\n\r\n    <div class=\"form-group mb-3\">\r\n      <label for=\"startDate\">Start Date:</label>\r\n      <input type=\"date\" class=\"form-control\" id=\"startDate\" [(ngModel)]=\"startDate\" name=\"startDate\" required>\r\n    </div>\r\n\r\n    <div class=\"form-group mb-3\">\r\n      <label for=\"endDate\">End Date:</label>\r\n      <input type=\"date\" class=\"form-control\" id=\"endDate\" [(ngModel)]=\"endDate\" name=\"endDate\" required>\r\n    </div>\r\n\r\n    <button type=\"submit\" class=\"btn btn-primary\">Generate Itinerary</button>\r\n  </form>\r\n\r\n  <!-- Show Generated Itinerary -->\r\n  <div *ngIf=\"showItinerary\" class=\"mt-4\">\r\n    <h4>Your AI Trip Plan:</h4>\r\n    <div [innerHTML]=\"convertedItineraryHtml\" class=\"border rounded p-3 bg-light\"></div>\r\n\r\n    <button class=\"btn btn-success mt-3\" (click)=\"saveTrip()\">Save AI Trip Plan</button>\r\n  </div>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}