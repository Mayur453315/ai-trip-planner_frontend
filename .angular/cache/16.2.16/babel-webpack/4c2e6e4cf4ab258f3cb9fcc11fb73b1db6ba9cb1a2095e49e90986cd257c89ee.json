{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/auth.service\";\nimport * as i2 from \"@angular/router\";\n// import { AuthService } from './auth.service';\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const userData = JSON.parse(localStorage.getItem('user') || '{}');\n    if (userData && userData.role) {\n      const expectedRole = route.data['expectedRole'];\n      if (userData.role === expectedRole) {\n        return true;\n      } else {\n        this.router.navigate(['/login']);\n        return false;\n      }\n    }\n    this.router.navigate(['/login']);\n    return false;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","userData","JSON","parse","localStorage","getItem","role","expectedRole","data","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from './services/auth.service';\n// import { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    const userData = JSON.parse(localStorage.getItem('user') || '{}');\n\n    if (userData && userData.role) {\n      const expectedRole = route.data['expectedRole'];\n      if (userData.role === expectedRole) {\n        return true;\n      } else {\n        this.router.navigate(['/login']);\n        return false;\n      }\n    }\n\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n"],"mappings":";;;AAGA;AAKA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IAEjE,IAAIJ,QAAQ,IAAIA,QAAQ,CAACK,IAAI,EAAE;MAC7B,MAAMC,YAAY,GAAGR,KAAK,CAACS,IAAI,CAAC,cAAc,CAAC;MAC/C,IAAIP,QAAQ,CAACK,IAAI,KAAKC,YAAY,EAAE;QAClC,OAAO,IAAI;OACZ,MAAM;QACL,IAAI,CAACV,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;QAChC,OAAO,KAAK;;;IAIhB,IAAI,CAACZ,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACd;;;uBAlBWf,SAAS,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATrB,SAAS;MAAAsB,OAAA,EAATtB,SAAS,CAAAuB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}