{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AiTripService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8084/api/ai-trips';\n  }\n  getTripsByUser(email) {\n    return this.http.get(`${this.baseUrl}/${email}`);\n  }\n  saveTrip(trip) {\n    return this.http.post(`${this.baseUrl}/save`, trip);\n  }\n  deleteTrip(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`, {\n      responseType: 'text'\n    });\n  }\n  updateTrip(id, trip) {\n    return this.http.put(`${this.baseUrl}/${id}`, trip);\n  }\n  getTripById(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function AiTripService_Factory(t) {\n      return new (t || AiTripService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AiTripService,\n      factory: AiTripService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AiTripService","constructor","http","baseUrl","getTripsByUser","email","get","saveTrip","trip","post","deleteTrip","id","delete","responseType","updateTrip","put","getTripById","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\services\\ai-trip.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface AiTrip {\n  id: number;\n  destination: string;\n  startDate: string;\n  endDate: string;\n  itinerary: string;\n  userEmail: string;  // ✅ Add this field\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiTripService {\n  private baseUrl = 'http://localhost:8084/api/ai-trips';\n\n  constructor(private http: HttpClient) {}\n\n  getTripsByUser(email: string): Observable<AiTrip[]> {\n    return this.http.get<AiTrip[]>(`${this.baseUrl}/${email}`);\n  }\n\n  saveTrip(trip: Omit<AiTrip, 'id'>): Observable<any> {\n    return this.http.post(`${this.baseUrl}/save`, trip);\n  }\n\n  deleteTrip(id: number): Observable<string> {\n    return this.http.delete(`${this.baseUrl}/${id}`, { responseType: 'text' });\n  }\n\n  updateTrip(id: number, trip: AiTrip): Observable<AiTrip> {\n    return this.http.put<AiTrip>(`${this.baseUrl}/${id}`, trip);\n  }\n\n  getTripById(id: number): Observable<AiTrip> {\n    return this.http.get<AiTrip>(`${this.baseUrl}/${id}`);\n  }\n}\n"],"mappings":";;AAgBA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,oCAAoC;EAEf;EAEvCC,cAAcA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAW,GAAG,IAAI,CAACH,OAAO,IAAIE,KAAK,EAAE,CAAC;EAC5D;EAEAE,QAAQA,CAACC,IAAwB;IAC/B,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAG,IAAI,CAACN,OAAO,OAAO,EAAEK,IAAI,CAAC;EACrD;EAEAE,UAAUA,CAACC,EAAU;IACnB,OAAO,IAAI,CAACT,IAAI,CAACU,MAAM,CAAC,GAAG,IAAI,CAACT,OAAO,IAAIQ,EAAE,EAAE,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC;EAC5E;EAEAC,UAAUA,CAACH,EAAU,EAAEH,IAAY;IACjC,OAAO,IAAI,CAACN,IAAI,CAACa,GAAG,CAAS,GAAG,IAAI,CAACZ,OAAO,IAAIQ,EAAE,EAAE,EAAEH,IAAI,CAAC;EAC7D;EAEAQ,WAAWA,CAACL,EAAU;IACpB,OAAO,IAAI,CAACT,IAAI,CAACI,GAAG,CAAS,GAAG,IAAI,CAACH,OAAO,IAAIQ,EAAE,EAAE,CAAC;EACvD;;;uBAvBWX,aAAa,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbpB,aAAa;MAAAqB,OAAA,EAAbrB,aAAa,CAAAsB,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}