{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AiTripService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8084/api/ai-trips';\n  }\n  createTrip(trip) {\n    return this.http.post(this.apiUrl, trip);\n  }\n  // ✅ Fetch trips only for the logged-in user\n  getTripsByUser(email) {\n    return this.http.get(`${this.apiUrl}/user/${email}`);\n  }\n  getTripById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  updateTrip(id, trip) {\n    return this.http.put(`${this.apiUrl}/${id}`, trip);\n  }\n  deleteTrip(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function AiTripService_Factory(t) {\n      return new (t || AiTripService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AiTripService,\n      factory: AiTripService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AiTripService","constructor","http","apiUrl","createTrip","trip","post","getTripsByUser","email","get","getTripById","id","updateTrip","put","deleteTrip","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\services\\ai-trip.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport interface AiTrip {\n  id?: number;\n  destination: string;\n  startDate: string;\n  endDate: string;\n  itinerary: string;\n  userEmail: string; // ✅ new field\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AiTripService {\n  private apiUrl = 'http://localhost:8084/api/ai-trips';\n\n  constructor(private http: HttpClient) {}\n\n  createTrip(trip: AiTrip): Observable<AiTrip> {\n    return this.http.post<AiTrip>(this.apiUrl, trip);\n  }\n\n  // ✅ Fetch trips only for the logged-in user\n  getTripsByUser(email: string): Observable<AiTrip[]> {\n    return this.http.get<AiTrip[]>(`${this.apiUrl}/user/${email}`);\n  }\n\n  getTripById(id: number): Observable<AiTrip> {\n    return this.http.get<AiTrip>(`${this.apiUrl}/${id}`);\n  }\n\n  updateTrip(id: number, trip: AiTrip): Observable<AiTrip> {\n    return this.http.put<AiTrip>(`${this.apiUrl}/${id}`, trip);\n  }\n\n  deleteTrip(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}\n"],"mappings":";;AAgBA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,oCAAoC;EAEd;EAEvCC,UAAUA,CAACC,IAAY;IACrB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAS,IAAI,CAACH,MAAM,EAAEE,IAAI,CAAC;EAClD;EAEA;EACAE,cAAcA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAW,GAAG,IAAI,CAACN,MAAM,SAASK,KAAK,EAAE,CAAC;EAChE;EAEAE,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACT,IAAI,CAACO,GAAG,CAAS,GAAG,IAAI,CAACN,MAAM,IAAIQ,EAAE,EAAE,CAAC;EACtD;EAEAC,UAAUA,CAACD,EAAU,EAAEN,IAAY;IACjC,OAAO,IAAI,CAACH,IAAI,CAACW,GAAG,CAAS,GAAG,IAAI,CAACV,MAAM,IAAIQ,EAAE,EAAE,EAAEN,IAAI,CAAC;EAC5D;EAEAS,UAAUA,CAACH,EAAU;IACnB,OAAO,IAAI,CAACT,IAAI,CAACa,MAAM,CAAO,GAAG,IAAI,CAACZ,MAAM,IAAIQ,EAAE,EAAE,CAAC;EACvD;;;uBAxBWX,aAAa,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbnB,aAAa;MAAAoB,OAAA,EAAbpB,aAAa,CAAAqB,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}