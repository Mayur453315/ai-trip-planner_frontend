{"ast":null,"code":"\"use strict\";\n\n// import { Component } from '@angular/core';\n// import { HttpClient } from '@angular/common/http';\n// import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n// @Component({\n//   selector: 'app-generate-itinerary',\n//   templateUrl: './generate-itinerary.component.html',\n// })\n// export class GenerateItineraryComponent {\n//   destination = '';\n//   startDate = '';\n//   endDate = '';\n//   rawResult: string = '';\n//   translatedResult: string = '';\n//   safeHtmlResult: SafeHtml = '';\n//   isLoading: boolean = false;\n//   selectedLanguage = 'en';\n//   weatherData: any = null;\n//   constructor(private http: HttpClient, private sanitizer: DomSanitizer) {}\n//   // Step 1: Generate only itinerary\n//   generateItinerary() {\n//     this.rawResult = '';\n//     this.safeHtmlResult = '';\n//     this.isLoading = true;\n//     const body = {\n//       destination: this.destination,\n//       startDate: this.startDate,\n//       endDate: this.endDate,\n//     };\n//     this.http.post<any>('http://localhost:8084/api/gemini/generate-itinerary', body).subscribe({\n//       next: (res) => {\n//         this.rawResult = res.itinerary;\n//         this.translateItinerary(this.rawResult, this.selectedLanguage);\n//       },\n//       error: (err) => {\n//         console.error('Itinerary Error:', err);\n//         this.rawResult = 'An error occurred while generating the itinerary.';\n//         this.safeHtmlResult = this.rawResult;\n//         this.isLoading = false;\n//       },\n//     });\n//   }\n//   // Step 2: Only check weather and display packing list\n//   checkWeatherAndPacking() {\n//     this.rawResult = '';\n//     this.safeHtmlResult = '';\n//     this.weatherData = null;\n//     this.isLoading = true;\n//     const apiKey = 'cf4280e39d29669fba3fcbd9bfc61b0c';\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.destination}&appid=${apiKey}&units=metric`;\n//     this.http.get<any>(url).subscribe({\n//       next: (data) => {\n//         this.weatherData = data;\n//         this.isLoading = false;\n//       },\n//       error: (err) => {\n//         console.error('Weather Error:', err);\n//         this.weatherData = null;\n//         this.isLoading = false;\n//       }\n//     });\n//   }\n//   translateItinerary(text: string, targetLang: string) {\n//     if (targetLang === 'en') {\n//       this.translatedResult = text;\n//       this.safeHtmlResult = this.sanitizer.bypassSecurityTrustHtml(this.convertToHtml(text));\n//       this.isLoading = false;\n//       return;\n//     }\n//     const url = `https://libretranslate.de/translate`;\n//     const body = {\n//       q: text,\n//       source: 'en',\n//       target: targetLang,\n//       format: 'text'\n//     };\n//     this.http.post<any>(url, body).subscribe({\n//       next: (res) => {\n//         const translatedText = res.translatedText;\n//         this.translatedResult = translatedText;\n//         this.safeHtmlResult = this.sanitizer.bypassSecurityTrustHtml(this.convertToHtml(translatedText));\n//         this.isLoading = false;\n//       },\n//       error: (err) => {\n//         console.error('Translation Error:', err);\n//         this.translatedResult = text;\n//         this.safeHtmlResult = this.convertToHtml(text);\n//         this.isLoading = false;\n//       },\n//     });\n//   }\n//   private convertToHtml(markdown: string): string {\n//     let html = markdown;\n//     html = html.replace(/^## (.*$)/gim, '<h3>$1</h3>');\n//     html = html.replace(/^# (.*$)/gim, '<h2>$1</h2>');\n//     html = html.replace(/\\*\\*(.*?)\\*\\*/gim, '<strong>$1</strong>');\n//     html = html.replace(/\\*(.*?)\\*/gim, '<em>$1</em>');\n//     html = html.replace(/^\\* (.*$)/gim, '<li>$1</li>');\n//     html = html.replace(/(<li>[\\s\\S]*?<\\/li>)/gim, '<ul>$1</ul>');\n//     html = html.replace(/\\n/g, '<br>');\n//     return html.trim();\n//   }\n// }","map":{"version":3,"names":[],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\pages\\generate-itinerary\\generate-itinerary.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\n// import { HttpClient } from '@angular/common/http';\n// import { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n// @Component({\n//   selector: 'app-generate-itinerary',\n//   templateUrl: './generate-itinerary.component.html',\n// })\n// export class GenerateItineraryComponent {\n//   destination = '';\n//   startDate = '';\n//   endDate = '';\n//   rawResult: string = '';\n//   translatedResult: string = '';\n//   safeHtmlResult: SafeHtml = '';\n//   isLoading: boolean = false;\n//   selectedLanguage = 'en';\n//   weatherData: any = null;\n\n//   constructor(private http: HttpClient, private sanitizer: DomSanitizer) {}\n\n//   // Step 1: Generate only itinerary\n//   generateItinerary() {\n//     this.rawResult = '';\n//     this.safeHtmlResult = '';\n//     this.isLoading = true;\n\n//     const body = {\n//       destination: this.destination,\n//       startDate: this.startDate,\n//       endDate: this.endDate,\n//     };\n\n//     this.http.post<any>('http://localhost:8084/api/gemini/generate-itinerary', body).subscribe({\n//       next: (res) => {\n//         this.rawResult = res.itinerary;\n//         this.translateItinerary(this.rawResult, this.selectedLanguage);\n//       },\n//       error: (err) => {\n//         console.error('Itinerary Error:', err);\n//         this.rawResult = 'An error occurred while generating the itinerary.';\n//         this.safeHtmlResult = this.rawResult;\n//         this.isLoading = false;\n//       },\n//     });\n//   }\n\n//   // Step 2: Only check weather and display packing list\n//   checkWeatherAndPacking() {\n//     this.rawResult = '';\n//     this.safeHtmlResult = '';\n//     this.weatherData = null;\n//     this.isLoading = true;\n\n//     const apiKey = 'cf4280e39d29669fba3fcbd9bfc61b0c';\n//     const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.destination}&appid=${apiKey}&units=metric`;\n\n//     this.http.get<any>(url).subscribe({\n//       next: (data) => {\n//         this.weatherData = data;\n//         this.isLoading = false;\n//       },\n//       error: (err) => {\n//         console.error('Weather Error:', err);\n//         this.weatherData = null;\n//         this.isLoading = false;\n//       }\n//     });\n//   }\n\n//   translateItinerary(text: string, targetLang: string) {\n//     if (targetLang === 'en') {\n//       this.translatedResult = text;\n//       this.safeHtmlResult = this.sanitizer.bypassSecurityTrustHtml(this.convertToHtml(text));\n//       this.isLoading = false;\n//       return;\n//     }\n\n//     const url = `https://libretranslate.de/translate`;\n//     const body = {\n//       q: text,\n//       source: 'en',\n//       target: targetLang,\n//       format: 'text'\n//     };\n\n//     this.http.post<any>(url, body).subscribe({\n//       next: (res) => {\n//         const translatedText = res.translatedText;\n//         this.translatedResult = translatedText;\n//         this.safeHtmlResult = this.sanitizer.bypassSecurityTrustHtml(this.convertToHtml(translatedText));\n//         this.isLoading = false;\n//       },\n//       error: (err) => {\n//         console.error('Translation Error:', err);\n//         this.translatedResult = text;\n//         this.safeHtmlResult = this.convertToHtml(text);\n//         this.isLoading = false;\n//       },\n//     });\n//   }\n\n//   private convertToHtml(markdown: string): string {\n//     let html = markdown;\n//     html = html.replace(/^## (.*$)/gim, '<h3>$1</h3>');\n//     html = html.replace(/^# (.*$)/gim, '<h2>$1</h2>');\n//     html = html.replace(/\\*\\*(.*?)\\*\\*/gim, '<strong>$1</strong>');\n//     html = html.replace(/\\*(.*?)\\*/gim, '<em>$1</em>');\n//     html = html.replace(/^\\* (.*$)/gim, '<li>$1</li>');\n//     html = html.replace(/(<li>[\\s\\S]*?<\\/li>)/gim, '<ul>$1</ul>');\n//     html = html.replace(/\\n/g, '<br>');\n//     return html.trim();\n//   }\n// }\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}