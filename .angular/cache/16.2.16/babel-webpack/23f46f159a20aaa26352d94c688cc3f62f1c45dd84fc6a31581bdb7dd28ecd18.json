{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/platform-browser\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../user-navbar/user-navbar.component\";\nfunction GenerateItineraryComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"p\")(2, \"strong\");\n    i0.ɵɵtext(3, \"Generating your itinerary...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction GenerateItineraryComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"h4\");\n    i0.ɵɵtext(2, \"Generated Itinerary:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"pre\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.result);\n  }\n}\nexport class GenerateItineraryComponent {\n  constructor(http, sanitizer) {\n    this.http = http;\n    this.sanitizer = sanitizer;\n    this.destination = '';\n    this.startDate = '';\n    this.endDate = '';\n    this.rawResult = '';\n    this.safeHtmlResult = '';\n    this.isLoading = false;\n  }\n  generateItinerary() {\n    this.rawResult = '';\n    this.safeHtmlResult = '';\n    this.isLoading = true;\n    const body = {\n      destination: this.destination,\n      startDate: this.startDate,\n      endDate: this.endDate\n    };\n    this.http.post('http://localhost:8089/api/gemini/generate-itinerary', body).subscribe({\n      next: res => {\n        this.rawResult = res.itinerary;\n        this.safeHtmlResult = this.sanitizer.bypassSecurityTrustHtml(this.convertToHtml(res.itinerary));\n        this.isLoading = false;\n      },\n      error: err => {\n        console.error('Error:', err);\n        this.rawResult = 'An error occurred while generating the itinerary.';\n        this.safeHtmlResult = this.rawResult;\n        this.isLoading = false;\n      }\n    });\n  }\n  convertToHtml(markdown) {\n    let html = markdown;\n    // Convert headings\n    html = html.replace(/^## (.*$)/gim, '<h3>$1</h3>');\n    html = html.replace(/^# (.*$)/gim, '<h2>$1</h2>');\n    // Bold\n    html = html.replace(/\\*\\*(.*?)\\*\\*/gim, '<strong>$1</strong>');\n    // Italic\n    html = html.replace(/\\*(.*?)\\*/gim, '<em>$1</em>');\n    // Lists\n    html = html.replace(/^\\* (.*$)/gim, '<li>$1</li>');\n    // Wrap lists in <ul>\n    html = html.replace(/(<li>[\\s\\S]*?<\\/li>)/gim, '<ul>$1</ul>');\n    // Line breaks\n    html = html.replace(/\\n/g, '<br>');\n    return html.trim();\n  }\n  static {\n    this.ɵfac = function GenerateItineraryComponent_Factory(t) {\n      return new (t || GenerateItineraryComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.DomSanitizer));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GenerateItineraryComponent,\n      selectors: [[\"app-generate-itinerary\"]],\n      decls: 14,\n      vars: 5,\n      consts: [[2, \"max-width\", \"600px\", \"margin\", \"auto\", \"padding\", \"20px\"], [2, \"margin-bottom\", \"10px\"], [\"type\", \"text\", \"placeholder\", \"Destination\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"date\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [\"style\", \"margin-top: 20px;\", 4, \"ngIf\"], [2, \"margin-top\", \"20px\"]],\n      template: function GenerateItineraryComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-user-navbar\");\n          i0.ɵɵelementStart(1, \"div\", 0)(2, \"h2\");\n          i0.ɵɵtext(3, \"Generate Travel Itinerary\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 1)(5, \"input\", 2);\n          i0.ɵɵlistener(\"ngModelChange\", function GenerateItineraryComponent_Template_input_ngModelChange_5_listener($event) {\n            return ctx.destination = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(6, \"div\", 1)(7, \"input\", 3);\n          i0.ɵɵlistener(\"ngModelChange\", function GenerateItineraryComponent_Template_input_ngModelChange_7_listener($event) {\n            return ctx.startDate = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(8, \"div\", 1)(9, \"input\", 3);\n          i0.ɵɵlistener(\"ngModelChange\", function GenerateItineraryComponent_Template_input_ngModelChange_9_listener($event) {\n            return ctx.endDate = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function GenerateItineraryComponent_Template_button_click_10_listener() {\n            return ctx.generateItinerary();\n          });\n          i0.ɵɵtext(11, \" Generate \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(12, GenerateItineraryComponent_div_12_Template, 4, 0, \"div\", 5);\n          i0.ɵɵtemplate(13, GenerateItineraryComponent_div_13_Template, 5, 1, \"div\", 5);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngModel\", ctx.destination);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngModel\", ctx.startDate);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngModel\", ctx.endDate);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isLoading && ctx.result);\n        }\n      },\n      dependencies: [i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i5.UserNavbarComponent],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r1","result","GenerateItineraryComponent","constructor","http","sanitizer","destination","startDate","endDate","rawResult","safeHtmlResult","isLoading","generateItinerary","body","post","subscribe","next","res","itinerary","bypassSecurityTrustHtml","convertToHtml","error","err","console","markdown","html","replace","trim","ɵɵdirectiveInject","i1","HttpClient","i2","DomSanitizer","selectors","decls","vars","consts","template","GenerateItineraryComponent_Template","rf","ctx","ɵɵelement","ɵɵlistener","GenerateItineraryComponent_Template_input_ngModelChange_5_listener","$event","GenerateItineraryComponent_Template_input_ngModelChange_7_listener","GenerateItineraryComponent_Template_input_ngModelChange_9_listener","GenerateItineraryComponent_Template_button_click_10_listener","ɵɵtemplate","GenerateItineraryComponent_div_12_Template","GenerateItineraryComponent_div_13_Template","ɵɵproperty"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\pages\\generate-itinerary\\generate-itinerary.component.ts","E:\\tka\\travel-itinerary-frontend\\src\\app\\pages\\generate-itinerary\\generate-itinerary.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-generate-itinerary',\n  templateUrl: './generate-itinerary.component.html',\n})\nexport class GenerateItineraryComponent {\n  destination = '';\n  startDate = '';\n  endDate = '';\n  rawResult: string = '';\n  safeHtmlResult: SafeHtml = '';\n  isLoading: boolean = false;\n\n  constructor(private http: HttpClient, private sanitizer: DomSanitizer) {}\n\n  generateItinerary() {\n    this.rawResult = '';\n    this.safeHtmlResult = '';\n    this.isLoading = true;\n\n    const body = {\n      destination: this.destination,\n      startDate: this.startDate,\n      endDate: this.endDate,\n    };\n\n    this.http.post<any>('http://localhost:8089/api/gemini/generate-itinerary', body).subscribe({\n      next: (res) => {\n        this.rawResult = res.itinerary;\n        this.safeHtmlResult = this.sanitizer.bypassSecurityTrustHtml(\n          this.convertToHtml(res.itinerary)\n        );\n        this.isLoading = false;\n      },\n      error: (err) => {\n        console.error('Error:', err);\n        this.rawResult = 'An error occurred while generating the itinerary.';\n        this.safeHtmlResult = this.rawResult;\n        this.isLoading = false;\n      },\n    });\n  }\n\n  private convertToHtml(markdown: string): string {\n    let html = markdown;\n\n    // Convert headings\n    html = html.replace(/^## (.*$)/gim, '<h3>$1</h3>');\n    html = html.replace(/^# (.*$)/gim, '<h2>$1</h2>');\n\n    // Bold\n    html = html.replace(/\\*\\*(.*?)\\*\\*/gim, '<strong>$1</strong>');\n\n    // Italic\n    html = html.replace(/\\*(.*?)\\*/gim, '<em>$1</em>');\n\n    // Lists\n    html = html.replace(/^\\* (.*$)/gim, '<li>$1</li>');\n\n    // Wrap lists in <ul>\n    html = html.replace(/(<li>[\\s\\S]*?<\\/li>)/gim, '<ul>$1</ul>');\n\n    // Line breaks\n    html = html.replace(/\\n/g, '<br>');\n\n    return html.trim();\n  }\n}\n","<app-user-navbar></app-user-navbar>\n\n<div style=\"max-width: 600px; margin: auto; padding: 20px;\">\n  <h2>Generate Travel Itinerary</h2>\n\n  <div style=\"margin-bottom: 10px;\">\n    <input\n      type=\"text\"\n      [(ngModel)]=\"destination\"\n      placeholder=\"Destination\"\n      class=\"form-control\"\n    />\n  </div>\n\n  <div style=\"margin-bottom: 10px;\">\n    <input\n      type=\"date\"\n      [(ngModel)]=\"startDate\"\n      class=\"form-control\"\n    />\n  </div>\n\n  <div style=\"margin-bottom: 10px;\">\n    <input\n      type=\"date\"\n      [(ngModel)]=\"endDate\"\n      class=\"form-control\"\n    />\n  </div>\n\n  <button (click)=\"generateItinerary()\" class=\"btn btn-primary\">\n    Generate\n  </button>\n\n  <!-- Loader -->\n  <div *ngIf=\"isLoading\" style=\"margin-top: 20px;\">\n    <p><strong>Generating your itinerary...</strong></p>\n  </div>\n\n  <!-- Result -->\n  <div *ngIf=\"!isLoading && result\" style=\"margin-top: 20px;\">\n    <h4>Generated Itinerary:</h4>\n    <pre>{{ result }}</pre>\n  </div>\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}