{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8089/api/auth';\n  }\n  register(request) {\n    return this.http.post(`${this.baseUrl}/register`, request);\n  }\n  login(request) {\n    return this.http.post(`${this.baseUrl}/login`, request);\n  }\n  logout() {\n    localStorage.clear();\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  getRole() {\n    return localStorage.getItem('role');\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthService","constructor","http","baseUrl","register","request","post","login","logout","localStorage","clear","isLoggedIn","getItem","getRole","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterRequest {\n  name: string;\n  email: string;\n  password: string;\n  role: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  name: string;\n  email: string;\n  role: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = 'http://localhost:8089/api/auth';\n\n  constructor(private http: HttpClient) {}\n\n  register(request: RegisterRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.baseUrl}/register`, request);\n  }\n\n  login(request: LoginRequest): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.baseUrl}/login`, request);\n  }\n\n  logout(): void {\n    localStorage.clear();\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  getRole(): string | null {\n    return localStorage.getItem('role');\n  }\n}\n"],"mappings":";;AA0BA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,gCAAgC;EAEX;EAEvCC,QAAQA,CAACC,OAAwB;IAC/B,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAe,GAAG,IAAI,CAACH,OAAO,WAAW,EAAEE,OAAO,CAAC;EAC1E;EAEAE,KAAKA,CAACF,OAAqB;IACzB,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAe,GAAG,IAAI,CAACH,OAAO,QAAQ,EAAEE,OAAO,CAAC;EACvE;EAEAG,MAAMA,CAAA;IACJC,YAAY,CAACC,KAAK,EAAE;EACtB;EAEAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAACF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAC,OAAOA,CAAA;IACL,OAAOJ,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;EACrC;;;uBAvBWZ,WAAW,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXjB,WAAW;MAAAkB,OAAA,EAAXlB,WAAW,CAAAmB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}