{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"../user-navbar/user-navbar.component\";\nfunction GenerateItineraryComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"h4\");\n    i0.ɵɵtext(2, \"Your AI Trip Plan:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"div\", 12);\n    i0.ɵɵelementStart(4, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function GenerateItineraryComponent_div_19_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.saveTrip());\n    });\n    i0.ɵɵtext(5, \"Save AI Trip Plan\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.convertedItineraryHtml, i0.ɵɵsanitizeHtml);\n  }\n}\nexport class GenerateItineraryComponent {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.destination = '';\n    this.startDate = '';\n    this.endDate = '';\n    this.rawResult = '';\n    this.translatedResult = '';\n    this.showItinerary = false;\n  }\n  // Step 1: Generate AI Plan\n  generateItinerary() {\n    const tripData = {\n      destination: this.destination,\n      startDate: this.startDate,\n      endDate: this.endDate\n    };\n    this.http.post('http://localhost:8084/api/ai/generate-itinerary', tripData, {\n      responseType: 'text'\n    }).subscribe({\n      next: result => {\n        this.rawResult = result;\n        this.translatedResult = ''; // if you're using translation\n        this.showItinerary = true;\n      },\n      error: err => {\n        console.error('Error generating itinerary:', err);\n        alert('Failed to generate itinerary');\n      }\n    });\n  }\n  // Step 2: Save the itinerary\n  saveTrip() {\n    const userEmail = localStorage.getItem('email');\n    const finalText = this.translatedResult || this.rawResult;\n    const htmlFormatted = this.convertToHtml(finalText);\n    const tripData = {\n      destination: this.destination,\n      startDate: this.startDate,\n      endDate: this.endDate,\n      itinerary: htmlFormatted,\n      userEmail: userEmail\n    };\n    this.http.post('http://localhost:8084/api/ai-trips/save', tripData, {\n      responseType: 'text'\n    }).subscribe({\n      next: () => {\n        alert('Trip saved successfully!');\n        this.router.navigate(['/Ai-trip-list']);\n      },\n      error: err => {\n        console.error('Error saving trip:', err);\n        alert('Failed to save trip');\n      }\n    });\n  }\n  // Convert plain text to HTML\n  convertToHtml(text) {\n    const lines = text.split('\\n');\n    return lines.map(line => `<p>${line}</p>`).join('');\n  }\n  // Used in HTML to show preview\n  get convertedItineraryHtml() {\n    const finalText = this.translatedResult || this.rawResult;\n    return this.convertToHtml(finalText);\n  }\n  static {\n    this.ɵfac = function GenerateItineraryComponent_Factory(t) {\n      return new (t || GenerateItineraryComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GenerateItineraryComponent,\n      selectors: [[\"app-generate-itinerary\"]],\n      decls: 20,\n      vars: 4,\n      consts: [[1, \"container\", \"mt-4\", 2, \"max-width\", \"800px\"], [3, \"ngSubmit\"], [1, \"form-group\", \"mb-3\"], [\"for\", \"destination\"], [\"type\", \"text\", \"id\", \"destination\", \"name\", \"destination\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"startDate\"], [\"type\", \"date\", \"id\", \"startDate\", \"name\", \"startDate\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"endDate\"], [\"type\", \"date\", \"id\", \"endDate\", \"name\", \"endDate\", \"required\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"class\", \"mt-4\", 4, \"ngIf\"], [1, \"mt-4\"], [1, \"border\", \"rounded\", \"p-3\", \"bg-light\", 3, \"innerHTML\"], [1, \"btn\", \"btn-success\", \"mt-3\", 3, \"click\"]],\n      template: function GenerateItineraryComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"app-user-navbar\");\n          i0.ɵɵelementStart(1, \"div\", 0)(2, \"h2\");\n          i0.ɵɵtext(3, \"AI Trip Itinerary Generator\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function GenerateItineraryComponent_Template_form_ngSubmit_4_listener() {\n            return ctx.generateItinerary();\n          });\n          i0.ɵɵelementStart(5, \"div\", 2)(6, \"label\", 3);\n          i0.ɵɵtext(7, \"Destination:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"input\", 4);\n          i0.ɵɵlistener(\"ngModelChange\", function GenerateItineraryComponent_Template_input_ngModelChange_8_listener($event) {\n            return ctx.destination = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\", 5);\n          i0.ɵɵtext(11, \"Start Date:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"input\", 6);\n          i0.ɵɵlistener(\"ngModelChange\", function GenerateItineraryComponent_Template_input_ngModelChange_12_listener($event) {\n            return ctx.startDate = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 2)(14, \"label\", 7);\n          i0.ɵɵtext(15, \"End Date:\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(16, \"input\", 8);\n          i0.ɵɵlistener(\"ngModelChange\", function GenerateItineraryComponent_Template_input_ngModelChange_16_listener($event) {\n            return ctx.endDate = $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"button\", 9);\n          i0.ɵɵtext(18, \"Generate Itinerary\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(19, GenerateItineraryComponent_div_19_Template, 6, 1, \"div\", 10);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(8);\n          i0.ɵɵproperty(\"ngModel\", ctx.destination);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.startDate);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngModel\", ctx.endDate);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngIf\", ctx.showItinerary);\n        }\n      },\n      dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm, i5.UserNavbarComponent],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","GenerateItineraryComponent_div_19_Template_button_click_4_listener","ɵɵrestoreView","_r2","ctx_r1","ɵɵnextContext","ɵɵresetView","saveTrip","ɵɵadvance","ɵɵproperty","ctx_r0","convertedItineraryHtml","ɵɵsanitizeHtml","GenerateItineraryComponent","constructor","http","router","destination","startDate","endDate","rawResult","translatedResult","showItinerary","generateItinerary","tripData","post","responseType","subscribe","next","result","error","err","console","alert","userEmail","localStorage","getItem","finalText","htmlFormatted","convertToHtml","itinerary","navigate","text","lines","split","map","line","join","ɵɵdirectiveInject","i1","HttpClient","i2","Router","selectors","decls","vars","consts","template","GenerateItineraryComponent_Template","rf","ctx","GenerateItineraryComponent_Template_form_ngSubmit_4_listener","GenerateItineraryComponent_Template_input_ngModelChange_8_listener","$event","GenerateItineraryComponent_Template_input_ngModelChange_12_listener","GenerateItineraryComponent_Template_input_ngModelChange_16_listener","ɵɵtemplate","GenerateItineraryComponent_div_19_Template"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\pages\\generate-itinerary\\generate-itinerary.component.ts","E:\\tka\\travel-itinerary-frontend\\src\\app\\pages\\generate-itinerary\\generate-itinerary.component.html"],"sourcesContent":["// src/app/pages/generate-itinerary/generate-itinerary.component.ts\nimport { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-generate-itinerary',\n  templateUrl: './generate-itinerary.component.html'\n})\nexport class GenerateItineraryComponent {\n  destination = '';\n  startDate = '';\n  endDate = '';\n\n  rawResult = '';\n  translatedResult = '';\n  showItinerary = false;\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  // Step 1: Generate AI Plan\n  generateItinerary() {\n    const tripData = {\n      destination: this.destination,\n      startDate: this.startDate,\n      endDate: this.endDate\n    };\n\n    this.http.post('http://localhost:8084/api/ai/generate-itinerary', tripData, { responseType: 'text' }).subscribe({\n      next: (result) => {\n        this.rawResult = result;\n        this.translatedResult = ''; // if you're using translation\n        this.showItinerary = true;\n      },\n      error: (err) => {\n        console.error('Error generating itinerary:', err);\n        alert('Failed to generate itinerary');\n      }\n    });\n  }\n\n  // Step 2: Save the itinerary\n  saveTrip() {\n    const userEmail = localStorage.getItem('email');\n\n    const finalText = this.translatedResult || this.rawResult;\n    const htmlFormatted = this.convertToHtml(finalText);\n\n    const tripData = {\n      destination: this.destination,\n      startDate: this.startDate,\n      endDate: this.endDate,\n      itinerary: htmlFormatted,\n      userEmail: userEmail\n    };\n\n    this.http.post('http://localhost:8084/api/ai-trips/save', tripData, { responseType: 'text' }).subscribe({\n      next: () => {\n        alert('Trip saved successfully!');\n        this.router.navigate(['/Ai-trip-list']);\n      },\n      error: (err) => {\n        console.error('Error saving trip:', err);\n        alert('Failed to save trip');\n      }\n    });\n  }\n\n  // Convert plain text to HTML\n  convertToHtml(text: string): string {\n    const lines = text.split('\\n');\n    return lines.map(line => `<p>${line}</p>`).join('');\n  }\n\n  // Used in HTML to show preview\n  get convertedItineraryHtml(): string {\n    const finalText = this.translatedResult || this.rawResult;\n    return this.convertToHtml(finalText);\n  }\n}\n","<!-- src/app/pages/generate-itinerary/generate-itinerary.component.html -->\r\n<app-user-navbar></app-user-navbar>\r\n\r\n<div class=\"container mt-4\" style=\"max-width: 800px;\">\r\n  <h2>AI Trip Itinerary Generator</h2>\r\n\r\n  <form (ngSubmit)=\"generateItinerary()\">\r\n    <div class=\"form-group mb-3\">\r\n      <label for=\"destination\">Destination:</label>\r\n      <input type=\"text\" class=\"form-control\" id=\"destination\" [(ngModel)]=\"destination\" name=\"destination\" required>\r\n    </div>\r\n\r\n    <div class=\"form-group mb-3\">\r\n      <label for=\"startDate\">Start Date:</label>\r\n      <input type=\"date\" class=\"form-control\" id=\"startDate\" [(ngModel)]=\"startDate\" name=\"startDate\" required>\r\n    </div>\r\n\r\n    <div class=\"form-group mb-3\">\r\n      <label for=\"endDate\">End Date:</label>\r\n      <input type=\"date\" class=\"form-control\" id=\"endDate\" [(ngModel)]=\"endDate\" name=\"endDate\" required>\r\n    </div>\r\n\r\n    <button type=\"submit\" class=\"btn btn-primary\">Generate Itinerary</button>\r\n  </form>\r\n\r\n  <!-- Show Generated Itinerary -->\r\n  <div *ngIf=\"showItinerary\" class=\"mt-4\">\r\n    <h4>Your AI Trip Plan:</h4>\r\n    <div [innerHTML]=\"convertedItineraryHtml\" class=\"border rounded p-3 bg-light\"></div>\r\n\r\n    <button class=\"btn btn-success mt-3\" (click)=\"saveTrip()\">Save AI Trip Plan</button>\r\n  </div>\r\n</div>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}