{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AiTripService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8084/api/ai-trips';\n  }\n  getAllTrips() {\n    return this.http.get(`${this.baseUrl}/all`);\n  }\n  saveTrip(trip) {\n    return this.http.post(`${this.baseUrl}/save`, trip);\n  }\n  deleteTrip(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`, {\n      responseType: 'text'\n    });\n  }\n  getTripById(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  updateTrip(id, trip) {\n    return this.http.put(`${this.baseUrl}/${id}`, trip);\n  }\n  static {\n    this.ɵfac = function AiTripService_Factory(t) {\n      return new (t || AiTripService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AiTripService,\n      factory: AiTripService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AiTripService","constructor","http","baseUrl","getAllTrips","get","saveTrip","trip","post","deleteTrip","id","delete","responseType","getTripById","updateTrip","put","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\services\\ai-trip.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface AiTrip {\n  id: number;\n  destination: string;\n  startDate: string;\n  endDate: string;\n  itinerary: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AiTripService {\n  private baseUrl = 'http://localhost:8084/api/ai-trips';\n\n  constructor(private http: HttpClient) {}\n\n  getAllTrips(): Observable<AiTrip[]> {\n    return this.http.get<AiTrip[]>(`${this.baseUrl}/all`);\n  }\n\n  saveTrip(trip: Omit<AiTrip, 'id'>): Observable<any> {\n    return this.http.post(`${this.baseUrl}/save`, trip);\n  }\n\n  deleteTrip(id: number) {\n  return this.http.delete(`${this.baseUrl}/${id}`, { responseType: 'text' });\n}\ngetTripById(id: number): Observable<AiTrip> {\n  return this.http.get<AiTrip>(`${this.baseUrl}/${id}`);\n}\n\n\nupdateTrip(id: number, trip: AiTrip): Observable<AiTrip> {\n  return this.http.put<AiTrip>(`${this.baseUrl}/${id}`, trip);\n}\n\n}\n"],"mappings":";;AAeA,OAAM,MAAOA,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,oCAAoC;EAEf;EAEvCC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,GAAG,IAAI,CAACF,OAAO,MAAM,CAAC;EACvD;EAEAG,QAAQA,CAACC,IAAwB;IAC/B,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,OAAO,EAAEI,IAAI,CAAC;EACrD;EAEAE,UAAUA,CAACC,EAAU;IACrB,OAAO,IAAI,CAACR,IAAI,CAACS,MAAM,CAAC,GAAG,IAAI,CAACR,OAAO,IAAIO,EAAE,EAAE,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC;EAC5E;EACAC,WAAWA,CAACH,EAAU;IACpB,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,OAAO,IAAIO,EAAE,EAAE,CAAC;EACvD;EAGAI,UAAUA,CAACJ,EAAU,EAAEH,IAAY;IACjC,OAAO,IAAI,CAACL,IAAI,CAACa,GAAG,CAAS,GAAG,IAAI,CAACZ,OAAO,IAAIO,EAAE,EAAE,EAAEH,IAAI,CAAC;EAC7D;;;uBAvBaP,aAAa,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbnB,aAAa;MAAAoB,OAAA,EAAbpB,aAAa,CAAAqB,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}