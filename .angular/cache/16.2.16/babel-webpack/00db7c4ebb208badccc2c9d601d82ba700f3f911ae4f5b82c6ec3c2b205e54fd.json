{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TripService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8089/api/trips';\n    this.aiUrl = 'http://localhost:8089/api/ai/itinerary';\n  }\n  getHeaders() {\n    const email = localStorage.getItem('email') || '';\n    const role = localStorage.getItem('role') || '';\n    return new HttpHeaders({\n      email,\n      role\n    });\n  }\n  getAllTrips() {\n    return this.http.get(this.baseUrl, {\n      headers: this.getHeaders()\n    });\n  }\n  getTripById(id) {\n    return this.http.get(`${this.baseUrl}/${id}`, {\n      headers: this.getHeaders()\n    });\n  }\n  createTrip(trip) {\n    return this.http.post(this.baseUrl, trip, {\n      headers: this.getHeaders()\n    });\n  }\n  updateTrip(id, trip) {\n    return this.http.put(`${this.baseUrl}/${id}`, trip, {\n      headers: this.getHeaders()\n    });\n  }\n  deleteTrip(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`, {\n      headers: this.getHeaders()\n    });\n  }\n  addTrip(trip) {\n    return this.createTrip(trip);\n  }\n  generateAiItinerary(prompt) {\n    return this.http.post(this.aiUrl, {\n      prompt\n    }, {\n      headers: this.getHeaders(),\n      responseType: 'text'\n    });\n  }\n  static {\n    this.ɵfac = function TripService_Factory(t) {\n      return new (t || TripService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TripService,\n      factory: TripService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","TripService","constructor","http","baseUrl","aiUrl","getHeaders","email","localStorage","getItem","role","getAllTrips","get","headers","getTripById","id","createTrip","trip","post","updateTrip","put","deleteTrip","delete","addTrip","generateAiItinerary","prompt","responseType","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\services\\trip.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface Trip {\n  id?: number;\n  tripName: string;\n  destination: string;\n  startDate: string;\n  endDate: string;\n  budget: number;\n  notes: string;\n  user?: { email: string }; // Add user info to link with backend\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TripService {\n  private baseUrl = 'http://localhost:8089/api/trips';\n  private aiUrl = 'http://localhost:8089/api/ai/itinerary';\n\n  constructor(private http: HttpClient) {}\n\n  private getHeaders(): HttpHeaders {\n    const email = localStorage.getItem('email') || '';\n    const role = localStorage.getItem('role') || '';\n    return new HttpHeaders({ email, role });\n  }\n\n  getAllTrips(): Observable<Trip[]> {\n    return this.http.get<Trip[]>(this.baseUrl, { headers: this.getHeaders() });\n  }\n\n  getTripById(id: number): Observable<Trip> {\n    return this.http.get<Trip>(`${this.baseUrl}/${id}`, { headers: this.getHeaders() });\n  }\n\n  createTrip(trip: Trip): Observable<Trip> {\n    return this.http.post<Trip>(this.baseUrl, trip, { headers: this.getHeaders() });\n  }\n\n  updateTrip(id: number, trip: Trip): Observable<Trip> {\n    return this.http.put<Trip>(`${this.baseUrl}/${id}`, trip, { headers: this.getHeaders() });\n  }\n\n  deleteTrip(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${id}`, { headers: this.getHeaders() });\n  }\n\n  addTrip(trip: Trip): Observable<Trip> {\n    return this.createTrip(trip);\n  }\n\n  generateAiItinerary(prompt: string): Observable<string> {\n    return this.http.post(this.aiUrl, { prompt }, {\n      headers: this.getHeaders(),\n      responseType: 'text'\n    });\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAiB9D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAG,iCAAiC;IAC3C,KAAAC,KAAK,GAAG,wCAAwC;EAEjB;EAE/BC,UAAUA,CAAA;IAChB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;IACjD,MAAMC,IAAI,GAAGF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE;IAC/C,OAAO,IAAIT,WAAW,CAAC;MAAEO,KAAK;MAAEG;IAAI,CAAE,CAAC;EACzC;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAS,IAAI,CAACR,OAAO,EAAE;MAAES,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EAC5E;EAEAQ,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACZ,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,OAAO,IAAIW,EAAE,EAAE,EAAE;MAAEF,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EACrF;EAEAU,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAO,IAAI,CAACd,OAAO,EAAEa,IAAI,EAAE;MAAEJ,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EACjF;EAEAa,UAAUA,CAACJ,EAAU,EAAEE,IAAU;IAC/B,OAAO,IAAI,CAACd,IAAI,CAACiB,GAAG,CAAO,GAAG,IAAI,CAAChB,OAAO,IAAIW,EAAE,EAAE,EAAEE,IAAI,EAAE;MAAEJ,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EAC3F;EAEAe,UAAUA,CAACN,EAAU;IACnB,OAAO,IAAI,CAACZ,IAAI,CAACmB,MAAM,CAAO,GAAG,IAAI,CAAClB,OAAO,IAAIW,EAAE,EAAE,EAAE;MAAEF,OAAO,EAAE,IAAI,CAACP,UAAU;IAAE,CAAE,CAAC;EACxF;EAEAiB,OAAOA,CAACN,IAAU;IAChB,OAAO,IAAI,CAACD,UAAU,CAACC,IAAI,CAAC;EAC9B;EAEAO,mBAAmBA,CAACC,MAAc;IAChC,OAAO,IAAI,CAACtB,IAAI,CAACe,IAAI,CAAC,IAAI,CAACb,KAAK,EAAE;MAAEoB;IAAM,CAAE,EAAE;MAC5CZ,OAAO,EAAE,IAAI,CAACP,UAAU,EAAE;MAC1BoB,YAAY,EAAE;KACf,CAAC;EACJ;;;uBAzCWzB,WAAW,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX7B,WAAW;MAAA8B,OAAA,EAAX9B,WAAW,CAAA+B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}