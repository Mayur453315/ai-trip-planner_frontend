{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TripService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8084/api/trips'; // adjust as needed\n  }\n\n  getAllTrips() {\n    const email = localStorage.getItem('email');\n    return this.http.get(`${this.baseUrl}?email=${email}`);\n  }\n  getTripsByUser(email) {\n    return this.http.get(`${this.baseUrl}/trips/user/${email}`);\n  }\n  getTripById(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  addTrip(trip) {\n    return this.http.post(this.baseUrl, trip);\n  }\n  updateTrip(id, trip) {\n    return this.http.put(`${this.baseUrl}/${id}`, trip);\n  }\n  deleteTrip(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function TripService_Factory(t) {\n      return new (t || TripService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TripService,\n      factory: TripService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["TripService","constructor","http","baseUrl","getAllTrips","email","localStorage","getItem","get","getTripsByUser","getTripById","id","addTrip","trip","post","updateTrip","put","deleteTrip","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\services\\trip.service.ts"],"sourcesContent":["// src/app/services/trip.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Trip } from '../models/trip.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TripService {\n  private baseUrl = 'http://localhost:8084/api/trips'; // adjust as needed\n\n  constructor(private http: HttpClient) {}\n\n  \n\n  getAllTrips(): Observable<Trip[]> {\n  const email = localStorage.getItem('email');\n  return this.http.get<Trip[]>(`${this.baseUrl}?email=${email}`);\n}\ngetTripsByUser(email: string): Observable<Trip[]> {\n  return this.http.get<Trip[]>(`${this.baseUrl}/trips/user/${email}`);\n}\n\n\n  getTripById(id: number): Observable<Trip> {\n    return this.http.get<Trip>(`${this.baseUrl}/${id}`);\n  }\n\n  addTrip(trip: Trip): Observable<Trip> {\n    return this.http.post<Trip>(this.baseUrl, trip);\n  }\n\n  updateTrip(id: number, trip: Trip): Observable<Trip> {\n    return this.http.put<Trip>(`${this.baseUrl}/${id}`, trip);\n  }\n\n  deleteTrip(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\n  }\n}\n"],"mappings":";;AASA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,iCAAiC,CAAC,CAAC;EAEd;;EAIvCC,WAAWA,CAAA;IACX,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAS,GAAG,IAAI,CAACL,OAAO,UAAUE,KAAK,EAAE,CAAC;EAChE;EACAI,cAAcA,CAACJ,KAAa;IAC1B,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAS,GAAG,IAAI,CAACL,OAAO,eAAeE,KAAK,EAAE,CAAC;EACrE;EAGEK,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACT,IAAI,CAACM,GAAG,CAAO,GAAG,IAAI,CAACL,OAAO,IAAIQ,EAAE,EAAE,CAAC;EACrD;EAEAC,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAO,IAAI,CAACX,OAAO,EAAEU,IAAI,CAAC;EACjD;EAEAE,UAAUA,CAACJ,EAAU,EAAEE,IAAU;IAC/B,OAAO,IAAI,CAACX,IAAI,CAACc,GAAG,CAAO,GAAG,IAAI,CAACb,OAAO,IAAIQ,EAAE,EAAE,EAAEE,IAAI,CAAC;EAC3D;EAEAI,UAAUA,CAACN,EAAU;IACnB,OAAO,IAAI,CAACT,IAAI,CAACgB,MAAM,CAAO,GAAG,IAAI,CAACf,OAAO,IAAIQ,EAAE,EAAE,CAAC;EACxD;;;uBA9BWX,WAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXtB,WAAW;MAAAuB,OAAA,EAAXvB,WAAW,CAAAwB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}