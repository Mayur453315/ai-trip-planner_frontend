{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TripService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8089/api/trips';\n    this.aiUrl = 'http://localhost:8089/api/ai/itinerary';\n  }\n  // üîÅ Replace with logged-in user's email from your auth system\n  getUserEmail() {\n    return localStorage.getItem('userEmail') || 'user@example.com';\n  }\n  getAllTrips() {\n    const email = this.getUserEmail();\n    return this.http.get(`${this.baseUrl}/${email}`);\n  }\n  getTripById(id) {\n    const email = this.getUserEmail();\n    return this.http.get(`${this.baseUrl}/${id}/${email}`);\n  }\n  createTrip(trip) {\n    const email = this.getUserEmail();\n    return this.http.post(`${this.baseUrl}/${email}`, trip);\n  }\n  updateTrip(id, trip) {\n    const email = this.getUserEmail();\n    return this.http.put(`${this.baseUrl}/${id}/${email}`, trip);\n  }\n  deleteTrip(id) {\n    const email = this.getUserEmail();\n    return this.http.delete(`${this.baseUrl}/${id}/${email}`);\n  }\n  // Optional alias\n  addTrip(trip) {\n    return this.createTrip(trip);\n  }\n  generateAiItinerary(prompt) {\n    return this.http.post(this.aiUrl, {\n      prompt\n    }, {\n      responseType: 'text'\n    });\n  }\n  static {\n    this.…µfac = function TripService_Factory(t) {\n      return new (t || TripService)(i0.…µ…µinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: TripService,\n      factory: TripService.…µfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["TripService","constructor","http","baseUrl","aiUrl","getUserEmail","localStorage","getItem","getAllTrips","email","get","getTripById","id","createTrip","trip","post","updateTrip","put","deleteTrip","delete","addTrip","generateAiItinerary","prompt","responseType","i0","…µ…µinject","i1","HttpClient","factory","…µfac","providedIn"],"sources":["E:\\tka\\travel-itinerary-frontend\\src\\app\\services\\trip.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface Trip {\n  id?: number;\n  tripName: string;\n  destination: string;\n  startDate: string;\n  endDate: string;\n  budget: number;\n  notes: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TripService {\n  private baseUrl = 'http://localhost:8089/api/trips';\n  private aiUrl = 'http://localhost:8089/api/ai/itinerary';\n\n  constructor(private http: HttpClient) {}\n\n  // üîÅ Replace with logged-in user's email from your auth system\n  private getUserEmail(): string {\n    return localStorage.getItem('userEmail') || 'user@example.com';\n  }\n\n  getAllTrips(): Observable<Trip[]> {\n    const email = this.getUserEmail();\n    return this.http.get<Trip[]>(`${this.baseUrl}/${email}`);\n  }\n\n  getTripById(id: number): Observable<Trip> {\n    const email = this.getUserEmail();\n    return this.http.get<Trip>(`${this.baseUrl}/${id}/${email}`);\n  }\n\n  createTrip(trip: Trip): Observable<Trip> {\n    const email = this.getUserEmail();\n    return this.http.post<Trip>(`${this.baseUrl}/${email}`, trip);\n  }\n\n  updateTrip(id: number, trip: Trip): Observable<Trip> {\n    const email = this.getUserEmail();\n    return this.http.put<Trip>(`${this.baseUrl}/${id}/${email}`, trip);\n  }\n\n  deleteTrip(id: number): Observable<void> {\n    const email = this.getUserEmail();\n    return this.http.delete<void>(`${this.baseUrl}/${id}/${email}`);\n  }\n\n  // Optional alias\n  addTrip(trip: Trip): Observable<Trip> {\n    return this.createTrip(trip);\n  }\n\n  generateAiItinerary(prompt: string): Observable<string> {\n    return this.http.post(this.aiUrl, { prompt }, { responseType: 'text' });\n  }\n}\n"],"mappings":";;AAiBA,OAAM,MAAOA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAG,iCAAiC;IAC3C,KAAAC,KAAK,GAAG,wCAAwC;EAEjB;EAEvC;EACQC,YAAYA,CAAA;IAClB,OAAOC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI,kBAAkB;EAChE;EAEAC,WAAWA,CAAA;IACT,MAAMC,KAAK,GAAG,IAAI,CAACJ,YAAY,EAAE;IACjC,OAAO,IAAI,CAACH,IAAI,CAACQ,GAAG,CAAS,GAAG,IAAI,CAACP,OAAO,IAAIM,KAAK,EAAE,CAAC;EAC1D;EAEAE,WAAWA,CAACC,EAAU;IACpB,MAAMH,KAAK,GAAG,IAAI,CAACJ,YAAY,EAAE;IACjC,OAAO,IAAI,CAACH,IAAI,CAACQ,GAAG,CAAO,GAAG,IAAI,CAACP,OAAO,IAAIS,EAAE,IAAIH,KAAK,EAAE,CAAC;EAC9D;EAEAI,UAAUA,CAACC,IAAU;IACnB,MAAML,KAAK,GAAG,IAAI,CAACJ,YAAY,EAAE;IACjC,OAAO,IAAI,CAACH,IAAI,CAACa,IAAI,CAAO,GAAG,IAAI,CAACZ,OAAO,IAAIM,KAAK,EAAE,EAAEK,IAAI,CAAC;EAC/D;EAEAE,UAAUA,CAACJ,EAAU,EAAEE,IAAU;IAC/B,MAAML,KAAK,GAAG,IAAI,CAACJ,YAAY,EAAE;IACjC,OAAO,IAAI,CAACH,IAAI,CAACe,GAAG,CAAO,GAAG,IAAI,CAACd,OAAO,IAAIS,EAAE,IAAIH,KAAK,EAAE,EAAEK,IAAI,CAAC;EACpE;EAEAI,UAAUA,CAACN,EAAU;IACnB,MAAMH,KAAK,GAAG,IAAI,CAACJ,YAAY,EAAE;IACjC,OAAO,IAAI,CAACH,IAAI,CAACiB,MAAM,CAAO,GAAG,IAAI,CAAChB,OAAO,IAAIS,EAAE,IAAIH,KAAK,EAAE,CAAC;EACjE;EAEA;EACAW,OAAOA,CAACN,IAAU;IAChB,OAAO,IAAI,CAACD,UAAU,CAACC,IAAI,CAAC;EAC9B;EAEAO,mBAAmBA,CAACC,MAAc;IAChC,OAAO,IAAI,CAACpB,IAAI,CAACa,IAAI,CAAC,IAAI,CAACX,KAAK,EAAE;MAAEkB;IAAM,CAAE,EAAE;MAAEC,YAAY,EAAE;IAAM,CAAE,CAAC;EACzE;;;uBA3CWvB,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAX3B,WAAW;MAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}